import { RestApiResponse } from './RestApi';
import ResponseBody from './ResponseBody';
import { Wallet } from '../models/Wallet';
import { CreateWalletCommand, ImportKeystoreCommand, ImportPrivateKeyCommand, LinkWalletCommand } from '../models/Commands';
import { Profile } from '../models/Profile';
import { Balance } from '../models/Balance';
import { SecretType } from '../models/SecretType';
import { IntercomVerification } from '../models/IntercomVerification';
import TokenBalance from '../models/TokenBalance';
export default class Api {
    static token: string;
    static signTransaction(data: any, pincode: string): Promise<ResponseBody>;
    static executeTransaction(data: any, pincode: string): Promise<ResponseBody>;
    static prepareSignTransaction(data: any): Promise<any>;
    static prepareExecuteTransaction(data: any): Promise<any>;
    static getWallets(filter?: {
        secretType?: SecretType;
        clientId?: string;
    }): Promise<Wallet[]>;
    static getWallet(walletId: string): Promise<Wallet>;
    static getBalance(walletId: string): Promise<Balance>;
    static getProfile(): Promise<Profile>;
    static setMasterPin(newPin: string, oldPin?: string): Promise<boolean>;
    static createWallet(command: CreateWalletCommand): Promise<RestApiResponse<Wallet>>;
    static linkWallet(command: LinkWalletCommand, override?: boolean): Promise<ResponseBody>;
    static importPrivateKey(command: ImportPrivateKeyCommand): Promise<Wallet>;
    static importKeystore(command: ImportKeystoreCommand): Promise<Wallet>;
    static fetchIntercomVerification(): Promise<IntercomVerification>;
    static getTokenBalance(walletId: string, tokenAddress: string): Promise<RestApiResponse<TokenBalance>>;
    private static instance;
    private static getInstance;
    private static getApi;
    private static handleTransaction;
    private static prepareTransaction;
    private api;
    constructor();
}
