"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RestApi_1 = tslib_1.__importDefault(require("./RestApi"));
var Utils_1 = tslib_1.__importDefault(require("../utils/Utils"));
var Wallet_1 = require("../models/Wallet");
var Profile_1 = require("../models/Profile");
var Api = /** @class */ (function () {
    function Api() {
        this.api = new RestApi_1.default(Utils_1.default.urls.api, function () { return Api.token; });
    }
    Api.signTransaction = function (data, pincode) {
        return Api.handleTransaction('signatures', data, pincode);
    };
    Api.executeTransaction = function (data, pincode) {
        return Api.handleTransaction('transactions', data, pincode);
    };
    Api.prepareSignTransaction = function (data) {
        return Api.prepareTransaction('signatures', data);
    };
    Api.prepareExecuteTransaction = function (data) {
        return Api.prepareTransaction('transactions', data);
    };
    Api.getWallets = function (filter) {
        filter = (filter && Utils_1.default.removeNulls(filter)) || {};
        return Api.getApi().http
            .get('wallets', { params: filter })
            .then(function (result) {
            return result.data && result.data.success ? result.data.result : [];
        })
            .catch(function () {
            return [];
        });
    };
    Api.getWallet = function (walletId) {
        return Api.getApi().http
            .get("wallets/" + walletId)
            .then(function (result) {
            return result.data && result.data.success ? result.data.result : {};
        });
    };
    Api.getBalance = function (walletId) {
        return Api.getApi().http
            .get("wallets/" + walletId + "/balance")
            .then(function (result) {
            return result.data && result.data.success ? result.data.result : [];
        })
            .catch(function () {
            return {
                success: false,
                result: {},
            };
        });
    };
    Api.getProfile = function () {
        return Api.getApi().http
            .get('profile')
            .then(function (result) {
            return result.data && result.data.success ? result.data.result : new Profile_1.Profile();
        })
            .catch(function () {
            return new Profile_1.Profile();
        });
    };
    Api.setMasterPin = function (newPin, oldPin) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, Api.getApi().http
                        .patch('profile', Utils_1.default.removeNulls({ pincode: oldPin, newPincode: newPin }))
                        .then(function (res) {
                        return res && res.data && res.data.success;
                    })];
            });
        });
    };
    Api.createWallet = function (command) {
        return Api.getApi().http
            .post('wallets', command)
            .then(function (res) {
            return res.data;
        });
    };
    Api.linkWallet = function (command, override) {
        if (override === void 0) { override = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, Api.getApi().http
                        .post("wallets/link?override=" + override, Utils_1.default.removeNulls(command))
                        .then(function (axiosRes) {
                        return {
                            success: true,
                            result: {},
                        };
                    })
                        .catch(function (e) {
                        return {
                            success: false,
                            result: {},
                        };
                    })];
            });
        });
    };
    Api.importPrivateKey = function (command) {
        return Api.getApi().http
            .post("wallets/import", command)
            .then(function (res) {
            return Object.assign(new Wallet_1.Wallet(), res.data.result);
        });
    };
    Api.importKeystore = function (command) {
        return Api.getApi().http
            .post("wallets/import", command)
            .then(function (res) {
            return Object.assign(new Wallet_1.Wallet(), res.data.result);
        });
    };
    Api.fetchIntercomVerification = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Api.getApi().http.get('profile/intercom/verification')];
                    case 1:
                        response = _a.sent();
                        if (response.data && response.data.success) {
                            return [2 /*return*/, response.data.result];
                        }
                        else {
                            return [2 /*return*/, {
                                    hash: '',
                                }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Api.getTokenBalance = function (walletId, tokenAddress) {
        return Api.getApi().http
            .get("wallets/" + walletId + "/balance/tokens/" + tokenAddress)
            .then(function (result) {
            return Object.assign(tslib_1.__assign({}, result.data));
        });
    };
    Api.getInstance = function () {
        if (!Api.instance) {
            Api.instance = new Api();
        }
        return Api.instance;
    };
    Api.getApi = function () {
        return Api.getInstance().api;
    };
    Api.handleTransaction = function (endpoint, data, pincode) {
        return Api.getApi().http
            .post(endpoint, Utils_1.default.removeNulls(Object.assign(data, { pincode: pincode })))
            .then(function (axiosRes) {
            return axiosRes.data;
        })
            .catch(function (error) {
            if (error.data) {
                return Promise.reject(error.data);
            }
            else {
                return Promise.reject({ success: false, errors: [{ code: 'unknown.error', message: 'An unknown error occured' }] });
            }
        });
    };
    Api.prepareTransaction = function (endpoint, data) {
        return Api.getApi().http
            .post(endpoint + "/prepare", Utils_1.default.removeNullsAndEmpty(data))
            .then(function (res) {
            return res && res.data && res.data.result;
        });
    };
    Api.token = '';
    return Api;
}());
exports.default = Api;
//# sourceMappingURL=index.js.map