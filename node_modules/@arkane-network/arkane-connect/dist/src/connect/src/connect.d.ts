/// <reference path="../../../../src/typings.d.ts" />
import { Wallet } from '../../models/Wallet';
import { Profile } from '../../models/Profile';
import { LoginResult } from '../../Security';
import { KeycloakInstance, KeycloakPromise } from 'keycloak-js';
import { SimpleTransactionRequest } from '../../api/model/SimpleTransactionRequest';
export declare class ArkaneConnect {
    private static openWindow;
    private popup?;
    private popupMountedListener?;
    private messagePort?;
    private api;
    private clientId;
    private chains;
    private bearerTokenProvider;
    private auth;
    constructor(clientId: string, chains?: string[], environment?: string);
    checkAuthenticated(): Promise<AuthenticationResult>;
    authenticate(): Promise<AuthenticationResult>;
    afterAuthentication(loginResult: LoginResult): Promise<AuthenticationResult>;
    logout(): KeycloakPromise<void, void>;
    addOnTokenRefreshCallback(tokenRefreshCallback?: (token: string) => void): void;
    init(bearerTokenProvider?: any): Promise<void>;
    manageWallets(): void;
    getWallets(): Promise<Wallet[]>;
    getProfile(): Promise<Profile>;
    buildTransactionRequest(genericTransactionRequest: SimpleTransactionRequest): Promise<any>;
    executeTransaction(params: any): Promise<{}>;
    signTransaction(params: any): Promise<{}>;
    initPopup(): Promise<{
        success: boolean;
        errors: string[];
    }>;
    closePopup(): void;
    private cleanupPopup;
    private handleTransactionInPopup;
    private createPopupMountedListener;
    private filterOnMandatoryWallets;
    private initMessageChannel;
    private createMessageHandler;
    private addBeforeUnloadListener;
}
export interface AuthenticationResult {
    authenticated: (onAuthenticated: (auth: KeycloakInstance) => void) => AuthenticationResult;
    notAuthenticated: (onNotAuthenticated: (auth: KeycloakInstance) => void) => AuthenticationResult;
}
