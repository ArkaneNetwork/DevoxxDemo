"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var EventTypes_1 = require("../../types/EventTypes");
var RestApi_1 = tslib_1.__importDefault(require("../../api/RestApi"));
var Utils_1 = tslib_1.__importDefault(require("../../utils/Utils"));
var Profile_1 = require("../../models/Profile");
var Security_1 = tslib_1.__importDefault(require("../../Security"));
var ArkaneConnect = /** @class */ (function () {
    function ArkaneConnect(clientId, chains, environment) {
        this.clientId = clientId;
        this.chains = (chains || []).map(function (chain) { return chain.toLowerCase(); });
        Utils_1.default.environment = environment || 'prod';
        this.addBeforeUnloadListener();
    }
    ArkaneConnect.openWindow = function (url, title, w, h) {
        if (title === void 0) { title = 'Arkane Connect'; }
        if (w === void 0) { w = 350; }
        if (h === void 0) { h = 600; }
        var left = (screen.width / 2) - (w / 2);
        var top = (screen.height / 2) - (h / 2);
        var features = 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, ';
        features += "copyhistory=no, width=" + w + ", height=" + h + ", top=" + top + ", left=" + left;
        var newWindow = window.open('', title, features);
        if (newWindow) {
            newWindow.location.href = url;
        }
        return newWindow;
    };
    ArkaneConnect.prototype.checkAuthenticated = function () {
        var _this = this;
        return Security_1.default.checkAuthenticated(this.clientId)
            .then(function (loginResult) { return _this.afterAuthentication(loginResult); });
    };
    ArkaneConnect.prototype.authenticate = function () {
        var _this = this;
        return Security_1.default.login(this.clientId)
            .then(function (loginResult) { return _this.afterAuthentication(loginResult); });
    };
    ArkaneConnect.prototype.afterAuthentication = function (loginResult) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.auth = loginResult.keycloak;
                        if (!loginResult.authenticated) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, {
                            authenticated: function (callback) {
                                if (loginResult.authenticated) {
                                    callback(loginResult.keycloak);
                                }
                                return this;
                            },
                            notAuthenticated: function (callback) {
                                if (!loginResult.authenticated) {
                                    callback(loginResult.keycloak);
                                }
                                return this;
                            },
                        }];
                }
            });
        });
    };
    ArkaneConnect.prototype.logout = function () {
        return this.auth.logout();
    };
    ArkaneConnect.prototype.addOnTokenRefreshCallback = function (tokenRefreshCallback) {
        if (tokenRefreshCallback) {
            Security_1.default.onTokenUpdate = tokenRefreshCallback;
        }
    };
    ArkaneConnect.prototype.init = function (bearerTokenProvider) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var wallets, mandatoryWallets, currentLocation, redirectUri;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (bearerTokenProvider) {
                            this.bearerTokenProvider = bearerTokenProvider;
                        }
                        else {
                            this.bearerTokenProvider = function () { return _this.auth.token; };
                        }
                        if (!this.bearerTokenProvider) return [3 /*break*/, 2];
                        this.api = new RestApi_1.default(Utils_1.default.urls.api, this.bearerTokenProvider);
                        return [4 /*yield*/, this.getWallets()];
                    case 1:
                        wallets = _a.sent();
                        mandatoryWallets = wallets && wallets.length > 0 && this.filterOnMandatoryWallets(wallets);
                        if (!(mandatoryWallets && mandatoryWallets.length > 0)) {
                            currentLocation = window.location;
                            redirectUri = encodeURIComponent(currentLocation.origin + currentLocation.pathname + currentLocation.search);
                            window.location.href =
                                Utils_1.default.urls.connect + "/wallets/manage/" + this.chains[0] + "?bearerToken=" + this.bearerTokenProvider() + "&redirectUri=" + redirectUri +
                                    ("" + (Utils_1.default.environment ? '&environment=' + Utils_1.default.environment : ''));
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ArkaneConnect.prototype.manageWallets = function () {
        var currentLocation = window.location;
        var redirectUri = encodeURIComponent(currentLocation.origin + currentLocation.pathname + currentLocation.search);
        window.location.href =
            Utils_1.default.urls.connect + "/wallets/manage/" + this.chains[0] + "?bearerToken=" + this.bearerTokenProvider() + "&redirectUri=" + redirectUri +
                ("" + (Utils_1.default.environment ? '&environment=' + Utils_1.default.environment : ''));
    };
    ArkaneConnect.prototype.getWallets = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.http.get('wallets')];
                    case 1:
                        response = _a.sent();
                        if (response && response.data && response.data.success) {
                            return [2 /*return*/, response.data.result];
                        }
                        else {
                            return [2 /*return*/, []];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ArkaneConnect.prototype.getProfile = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.http.get('profile')];
                    case 1:
                        response = _a.sent();
                        if (response && response.data && response.data.success) {
                            return [2 /*return*/, response.data.result];
                        }
                        else {
                            return [2 /*return*/, new Profile_1.Profile()];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ArkaneConnect.prototype.buildTransactionRequest = function (genericTransactionRequest) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.api.http.post('transactions/build', genericTransactionRequest)];
                    case 1:
                        response = _a.sent();
                        if (response && response.data && response.data.success) {
                            return [2 /*return*/, response.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ArkaneConnect.prototype.executeTransaction = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.handleTransactionInPopup('execute', params)];
            });
        });
    };
    ArkaneConnect.prototype.signTransaction = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.handleTransactionInPopup('sign', params)];
            });
        });
    };
    ArkaneConnect.prototype.initPopup = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var url;
            return tslib_1.__generator(this, function (_a) {
                url = Utils_1.default.urls.connect + "/transaction/init";
                this.popup = ArkaneConnect.openWindow(url);
                return [2 /*return*/, {
                        success: false,
                        errors: ['Popup already open'],
                    }];
            });
        });
    };
    ArkaneConnect.prototype.closePopup = function () {
        if (this.popup) {
            this.popup.close();
            delete this.popup;
        }
        this.cleanupPopup();
    };
    ArkaneConnect.prototype.cleanupPopup = function () {
        if (this.messagePort) {
            this.messagePort.close();
            delete this.messagePort;
        }
        if (this.popupMountedListener) {
            window.removeEventListener('message', this.popupMountedListener);
            delete this.popupMountedListener;
        }
    };
    ArkaneConnect.prototype.handleTransactionInPopup = function (method, params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this.popup || this.popup.closed)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.initPopup()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.cleanupPopup();
                        if (this.popup) {
                            this.popup.focus();
                        }
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var url = Utils_1.default.urls.connect + "/transaction/" + method + "/" + params.type
                                    + ("?bearerToken=" + _this.bearerTokenProvider() + (Utils_1.default.environment ? '&environment=' + Utils_1.default.environment : ''));
                                _this.popup = ArkaneConnect.openWindow(url);
                                _this.popupMountedListener = _this.createPopupMountedListener(params, resolve, reject);
                                window.addEventListener('message', _this.popupMountedListener);
                            })];
                }
            });
        });
    };
    ArkaneConnect.prototype.createPopupMountedListener = function (params, resolve, reject) {
        var _this = this;
        return function (message) {
            if (Utils_1.default.messages().hasValidOrigin(message) && Utils_1.default.messages().isOfType(message, EventTypes_1.EVENT_TYPES.POPUP_MOUNTED)) {
                _this.initMessageChannel(params, message, resolve, reject);
            }
        };
    };
    ArkaneConnect.prototype.filterOnMandatoryWallets = function (wallets) {
        var _this = this;
        return wallets.filter(function (wallet) { return _this.chains.find(function (chain) { return wallet.secretType.toLowerCase() === chain; }) !== undefined; });
    };
    ArkaneConnect.prototype.initMessageChannel = function (params, message, resolve, reject) {
        this.messagePort = message.ports[0];
        this.messagePort.onmessage = this.createMessageHandler(resolve, reject);
        this.messagePort.postMessage({ type: EventTypes_1.EVENT_TYPES.SEND_TRANSACTION_DATA, params: params });
    };
    ArkaneConnect.prototype.createMessageHandler = function (resolve, reject) {
        var _this = this;
        return function (message) {
            if (Utils_1.default.messages().hasType(message)) {
                _this.closePopup();
                switch (message.data.type) {
                    case EventTypes_1.EVENT_TYPES.TRANSACTION_SIGNED:
                    case EventTypes_1.EVENT_TYPES.TRANSACTION_EXECUTED:
                        resolve(message.data && tslib_1.__assign({}, message.data.data));
                        break;
                    case EventTypes_1.EVENT_TYPES.POPUP_CLOSED:
                        reject({
                            success: false,
                            errors: ['Popup closed'],
                            result: {},
                        });
                        break;
                }
            }
        };
    };
    ArkaneConnect.prototype.addBeforeUnloadListener = function () {
        var _this = this;
        window.addEventListener('beforeunload', function () {
            _this.closePopup();
        });
    };
    return ArkaneConnect;
}());
exports.ArkaneConnect = ArkaneConnect;
if (typeof window !== 'undefined') {
    window.ArkaneConnect = ArkaneConnect;
}
//# sourceMappingURL=connect.js.map