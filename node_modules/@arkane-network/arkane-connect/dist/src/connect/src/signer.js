"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Utils_1 = tslib_1.__importDefault(require("../../utils/Utils"));
var EventTypes_1 = require("../../types/EventTypes");
var Signer = /** @class */ (function () {
    function Signer(bearerTokenProvider) {
        this.isPopupMounted = false;
        this.eventListeners = {};
        this.onPopupMountedQueue = [];
        this.bearerTokenProvider = bearerTokenProvider;
        var url = Utils_1.default.urls.connect + "/transaction/init";
        this.popup = Signer.openWindow(url);
        this.popupMountedListener = this.createPopupMountedListener();
        window.addEventListener('message', this.popupMountedListener);
    }
    Signer.createSigner = function (bearerTokenProvider) {
        if (Signer.signer) {
            Signer.signer.close();
        }
        Signer.signer = new Signer(bearerTokenProvider);
        return Signer.signer;
    };
    Signer.openWindow = function (url, title, w, h) {
        if (title === void 0) { title = 'Arkane Connect'; }
        if (w === void 0) { w = 350; }
        if (h === void 0) { h = 600; }
        var left = (screen.width / 2) - (w / 2);
        var top = (screen.height / 2) - (h / 2);
        var features = 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, ';
        features += "copyhistory=no, width=" + w + ", height=" + h + ", top=" + top + ", left=" + left;
        var newWindow = window.open('', title, features);
        if (newWindow) {
            newWindow.location.href = url;
        }
        return newWindow;
    };
    Signer.prototype.executeTransaction = function (transactionRequest) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.handleTransactionInPopup('execute', transactionRequest)];
            });
        });
    };
    Signer.prototype.signTransaction = function (transactionRequest) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.handleTransactionInPopup('sign', transactionRequest)];
            });
        });
    };
    Signer.prototype.close = function () {
        this.popup.close();
        if (this.messagePort) {
            this.messagePort.close();
        }
        if (this.popupMountedListener) {
            window.removeEventListener('message', this.popupMountedListener);
        }
        delete Signer.signer;
    };
    Signer.prototype.addEventListener = function (event, handleFunction) {
        this.eventListeners[event] = handleFunction;
    };
    Signer.prototype.handleTransactionInPopup = function (method, transactionRequest) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                this.popup.focus();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var url = Utils_1.default.urls.connect + "/transaction/" + method + "/" + transactionRequest.type
                            + ("?bearerToken=" + _this.bearerTokenProvider() + (Utils_1.default.environment ? '&environment=' + Utils_1.default.environment : ''));
                        _this.popup = Signer.openWindow(url);
                        _this.onPopupMountedQueue.push(_this.attachMessageHandler(resolve, reject));
                        _this.onPopupMountedQueue.push(_this.sendTransactionRequest(transactionRequest));
                        _this.processPopupMountedQueue();
                    })];
            });
        });
    };
    Signer.prototype.attachMessageHandler = function (resolve, reject) {
        var _this = this;
        return function () {
            if (_this.messagePort) {
                _this.messagePort.onmessage = _this.createMessageHandler(resolve, reject);
            }
        };
    };
    Signer.prototype.sendTransactionRequest = function (transactionRequest) {
        var _this = this;
        return function () {
            if (_this.messagePort) {
                _this.messagePort.postMessage({ type: EventTypes_1.EVENT_TYPES.SEND_TRANSACTION_DATA, params: transactionRequest });
            }
        };
    };
    Signer.prototype.cleanupPopup = function () {
        if (this.messagePort) {
            this.messagePort.close();
            delete this.messagePort;
        }
        if (this.popupMountedListener) {
            window.removeEventListener('message', this.popupMountedListener);
            delete this.popupMountedListener;
        }
    };
    Signer.prototype.createPopupMountedListener = function () {
        var _this = this;
        return function (message) {
            if (Utils_1.default.messages().hasValidOrigin(message) && Utils_1.default.messages().isOfType(message, EventTypes_1.EVENT_TYPES.POPUP_MOUNTED)) {
                _this.isPopupMounted = true;
                _this.messagePort = message.ports[0];
                _this.processPopupMountedQueue();
            }
        };
    };
    Signer.prototype.processPopupMountedQueue = function () {
        if (this.isPopupMounted) {
            this.onPopupMountedQueue.forEach(function (callback) { return callback(); });
        }
    };
    Signer.prototype.createMessageHandler = function (resolve, reject) {
        var _this = this;
        return function (message) {
            if (Utils_1.default.messages().hasType(message)) {
                _this.close();
                switch (message.data.type) {
                    case EventTypes_1.EVENT_TYPES.TRANSACTION_SIGNED:
                    case EventTypes_1.EVENT_TYPES.TRANSACTION_EXECUTED:
                        resolve(message.data && tslib_1.__assign({}, message.data.data));
                        break;
                    case EventTypes_1.EVENT_TYPES.POPUP_CLOSED:
                        reject({
                            success: false,
                            errors: ['Popup closed'],
                            result: {},
                        });
                        break;
                }
            }
        };
    };
    return Signer;
}());
exports.Signer = Signer;
//# sourceMappingURL=signer.js.map