import { Wallet } from '../models/Wallet';
import { EVENT_TYPES } from '../types/EventTypes';
import { SecretType } from '../models/SecretType';
import { Chain } from '../models/Chain';
export default class Utils {
    static environment: string;
    static wallets: {
        hasWalletsForChainType: (wallets: Wallet[], chain: Chain) => boolean;
        filterWalletsForChainType: (wallets: Wallet[], chain: Chain) => Wallet[];
        hasWalletsForSecretType: (wallets: Wallet[], secretType: SecretType) => boolean;
        filterWalletsForSecretType: (wallets: Wallet[], secretType: SecretType) => Wallet[];
    };
    static readonly env: any;
    static readonly urls: {
        api: string;
        connect: string;
        login: string;
    };
    static getOrigin(url: string): any;
    static shuffleArray(array: any[]): any[];
    static removeNulls(obj: any): any;
    static removeNullsAndEmpty(obj: any): any;
    static messages(): {
        hasValidOrigin: (message: MessageEvent) => boolean;
        hasType: (message: MessageEvent) => boolean;
        isOfType: (message: MessageEvent, eventType: EVENT_TYPES) => boolean;
    };
    static formatNumber(value: number, minDecimals?: number, maxDecimals?: number): string;
    static rawValue(): {
        toTokenValue: (rawValue: number, decimals: number) => number;
        toGwei: (rawValue: number) => number;
    };
    static gwei(): {
        toRawValue: (rawValue: number) => number;
    };
    static openExternalUrl(url: string, targetBlank?: boolean): Window | null;
    static zeroIfUndefined(numberToVerify?: number): number;
}
